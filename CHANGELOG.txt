ver 2.1.13:
增加了：
    1.$this->cache为最新的phpfastcache2.1,缓存功能更加强大,而且编写自己的缓存类非常容易。
    2.自定义缓存类说明：
        $system['cache_drivers'] = array();
        自定义缓存类文件的路径是$system['cache_drivers']的一个元素，可以有多个自定义缓存类。
        缓存类文件名称命名规范是：
           比如文件名是mycahe.php,那么文件mycahe.php里面的缓存类就是：class phpfastcache_mycahe{......}
           mycahe.php的编写规范请参考：https://github.com/khoaofgod/phpfastcache/tree/Stable-Version-1.x/phpfastcache_v2.1_release/phpfastcache/drivers
    3.phpfastcache增加Redis缓存支持
    4.Redis存储SESSION支持。
    5.Memcache存储SESSION支持。
    6.Mongodb存储SESSION支持。
    7.Mysql存储SESSION支持。
删除了：
    1.WoniuCache已经被移除，请使用$this->cache代替
优化了：
    1.缓存文件夹的创建。
升级提示：
1.如果项目中使用了WoniuCache进行缓存，请使用$this->cache代替
2.在$system中增加如下配置：
/**
 * ========================缓存配置========================
 */
$system['cache_drivers'] = array();
$system['cache_config'] = array(
    /*
     * 默认存储方式
     * 可用的方式有：auto,apc,sqlite,files,memcached,redis,wincache,xcache,memcache
     * auto自动模式寻找的顺序是 : apc,sqlite,files,memcached,redis,wincache,xcache,memcache
     */
    "storage" => "auto",
    /*
     * 默认缓存文件存储的路径
     * 使用绝对全路径，比如： /home/username/cache
     * 留空，系统自己选择
     */
    "path" => "", // 缓存文件存储默认路径
    "securityKey" => "", // 缓存安全key，建议留空，系统会自动处理 PATH/securityKey

    /*
     * 第二驱动
     * 比如：当你现在在代码中使用的是memcached, apc等等，然后你的代码转移到了一个新的服务器而且不支持memcached 或 apc
     * 这时候怎么办呢？设置第二驱动即可，当你设置的驱动不支持的时候，系统就使用第二驱动。
     * $key是你设置的驱动，当设置的“storage”=$key不可用时，就使用$key对应的$value驱动
     */
    "fallback" => array(
        "memcache" => "files",
        "memcached" => "files",
        "redis" => "files",
        "wincache" => "files",
        "xcache" => "files",
        "apc" => "files",
        "sqlite" => "files",
    ),
    /*
     * .htaccess 保护
     * true会自动在缓存文件夹里面建立.htaccess文件防止web非法访问
     */
    "htaccess" => false,
    /*
     * Memcache服务器地址;
     */
    "server" => array(
        array("192.168.199.25", 11211, 1),
    //  array("new.host.ip",11211,1),
    ),
    /*
     * Redis服务器地址;
     */
    "redis" => array(
        'type'=>'tcp',//sock,tcp;连接类型，tcp：使用host port连接，sock：本地sock文件连接
        'prefix'=>@$_SERVER['HTTP_HOST'],//key的前缀，便于管理查看，在set和get的时候会自动加上和去除前缀，无前缀请保持null
        'sock'=>'',//sock的完整路径
        'host' => '192.168.199.25',
        'port' => 6379,
        'password' => NULL,//密码，如果没有,保持null
        'timeout'=>0,//0意味着没有超时限制，单位秒
        'retry'=>100,//连接失败后的重试时间间隔，单位毫秒
        'db' => 0, // 数据库序号，默认0, 参考 http://redis.io/commands/select
    ),
);
/**
 * =======================SESSION管理配置=======================
 */
$system['session_handle'] = array(
    'handle' => '', //支持的管理类型：mongodb,mysql,memcache,redis。不使用留空即可。
    'common' => array(
        'autostart' => true,//是否自动session_start()
        'cookie_path' => '/',
        'cookie_domain' => '.' . @$_SERVER['HTTP_HOST'],
        'session_name' => 'PHPSESSID',
        'lifetime' => 3600, // session lifetime in seconds
    ),
    'mongodb' => array(
        'host' => '192.168.199.25',
        'port' => 27017,
        'user' => 'root',
        'password' => 'local',
        'database' => 'local', // name of MongoDB database
        'collection' => 'session', // name of MongoDB collection
        // persistent related vars
        'persistent' => false, // persistent connection to DB?
        'persistentId' => 'MongoSession', // name of persistent connection
        // whether we're supporting replicaSet
        'replicaSet' => false,
    ),
    /**
     * mysql表结构
     *   CREATE TABLE `session_handler_table` (
      `id` varchar(255) NOT NULL,
      `data` mediumtext NOT NULL,
      `timestamp` int(255) NOT NULL,
      PRIMARY KEY (`id`),
      UNIQUE KEY `id` (`id`,`timestamp`),
      KEY `timestamp` (`timestamp`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
     */
    'mysql' => array(
        'host' => '127.0.0.1',
        'port' => 3306,
        'user' => 'root',
        'password' => 'admin',
        'database' => 'test',
        'table' => 'session_handler_table',
    ),
    /**
     * memcache采用的是session.save_handler管理机制
     * 需要php安装memcache拓展支持
     */
    'memcache' => "tcp://192.168.199.25:11211",
    /**
     * redis采用的是session.save_handler管理机制
     * 需要php安装redis拓展支持,你可以在https://github.com/nicolasff/phpredis 找到该拓展。
     */
    'redis' => "tcp://192.168.199.25:6379",
);

ver 2.1.12:
增加了：
1.自定义路由模式。
    比如：
    (1).http://localhost/index.php?welcome.index
    (2).http://localhost/index.php/welcome.index
    路由字符串是welcome.index(不包含最前面的?或者/)，路由规则都是针对“路由字符串”的。
    现在定义路由规则：
    $system['route']=array(
        "/^welcome\\/?(.*)$/u"=>'welcome.ajax/$1'
    );
    路由规则说明：
    1.路由规则是一个关联数组
    2.数组的key是匹配“路由字符串”的正则表达式，其实就是preg_match的第一个参数。
    3.数组的value是替换后的路由字符串
    4.系统使用的url路由就是最后替换后的路由字符串
优化了：
1.$this->db->xxx_where_in($key,$array),自动检测$array是否是空数组，
  当$array为空数组时,就认为$array=array('')即$key为''空值,不再报错。
升级提示:
1.如果想使用路由功能请在index.php的$system里面增加$system['route']=array();即可。


ver 2.1.11:
修复了:
1.$this->config($group,$key),当$key是0时无效的问题。
增加了:
1.增加了$this->setConfig($key,$val)方法，设置配置,$key是helper文件里面的全局变量名称
优化了：
1.修改$this->helper()和$this->config()把配置变量放到$this->config避免与全局变量冲突
2.在支持代码提示的IDE中，例如Netbeans，增加了$this->db->...的数据库方法提示
升级提示:无

ver 2.1.10:
修复了:
1.在PHP5.4及以上版本中的notice问题 Strict Standards: Declaration of xxx。
增加了:
1.命令行支持
2.mysqli驱动支持
升级提示:无

ver 2.1.9beta2:

修复了:
1.$this->view()不传递数据时，$this->view_vars无效的问题。
增加了:无
升级提示:无

ver 2.1.9beta:
修复了:
1.router的注入时机，使得在父类的构造方法之后即可使用路由信息。
增加了:
1.控制器中$this->view_vars['vars']='xxx';可以向$this->view_vars添加附加的视图数据，该数据会在显示视图的时候附加到视图数据里面。
升级提示:无

ver 2.1.8:
修复了:找不到library class的提示信息。
增加了:$this->router;包含了所有的路由信息。
升级提示:无
