ver 2.1.13:
增加了：
1.$this->cache为最新的phpfastcache2.1,缓存功能更加强大,而且编写自己的缓存类非常容易。
2.自定义缓存类说明：
    $system['cache_drivers'] = array();
    自定义缓存类文件的路径是$system['cache_drivers']的一个元素，可以有多个自定义缓存类。
    缓存类文件名称命名规范是：
       比如文件名是mycahe.php,那么文件mycahe.php里面的缓存类就是：class phpfastcache_mycahe{......}
       mycahe.php的编写规范请参考：https://github.com/khoaofgod/phpfastcache/tree/Stable-Version-1.x/phpfastcache_v2.1_release/phpfastcache/drivers
删除了：
1.WoniuCache已经被移除，请使用$this->cache代替
升级提示：
1.如果项目中使用了WoniuCache进行缓存，请使用$this->cache代替
2.在$system中增加如下配置：
/**
 * Caching Config
 */
$system['cache_drivers'] = array();
$system['cache_config'] = array(
    /*
     * Default storage
     * if you set this storage => "files", then $cache = phpFastCache(); <-- will be files cache
     * auto orders : apc,sqlite,files,memcached,wincache, xcache,memcache
     */
    "storage" => "auto", // auto,apc,sqlite,files,memcached,wincache, xcache,memcache

    /*
     * Default Path for Cache on HDD
     * Use full PATH like /home/username/cache
     * Keep it blank "", it will automatic setup for you
     */
    "path" => "", // default path for files
    "securityKey" => "", // default will good. It will create a path by PATH/securityKey

    /*
     * FallBack Driver
     * Example, in your code, you use memcached, apc..etc, but when you moved your web hosting
     * The new hosting don't have memcached, or apc. What you do? Set fallback that driver to other driver.
     */
    "fallback" => array(
        "example" => "files",
        "memcache" => "files",
        "memcached" => "files",
        "wincache" => "files",
        "xcache" => "files",
        "apc" => "files",
        "sqlite" => "files",
    ),
    /*
     * .htaccess protect
     * default will be  true
     */
    "htaccess" => false,
    /*
     * Default Memcache Server for all $cache = phpFastCache("memcache");
     */
    "server" => array(
        array("127.0.0.1", 11211, 1),
    //  array("new.host.ip",11211,1),
    ),
);

ver 2.1.12:
增加了：
1.自定义路由模式。
    比如：
    (1).http://localhost/index.php?welcome.index
    (2).http://localhost/index.php/welcome.index
    路由字符串是welcome.index(不包含最前面的?或者/)，路由规则都是针对“路由字符串”的。
    现在定义路由规则：
    $system['route']=array(
        "/^welcome\\/?(.*)$/u"=>'welcome.ajax/$1'
    );
    路由规则说明：
    1.路由规则是一个关联数组
    2.数组的key是匹配“路由字符串”的正则表达式，其实就是preg_match的第一个参数。
    3.数组的value是替换后的路由字符串
    4.系统使用的url路由就是最后替换后的路由字符串
优化了：
1.$this->db->xxx_where_in($key,$array),自动检测$array是否是空数组，
  当$array为空数组时,就认为$array=array('')即$key为''空值,不再报错。
升级提示:
1.如果想使用路由功能请在index.php的$system里面增加$system['route']=array();即可。


ver 2.1.11:
修复了:
1.$this->config($group,$key),当$key是0时无效的问题。
增加了:
1.增加了$this->setConfig($key,$val)方法，设置配置,$key是helper文件里面的全局变量名称
优化了：
1.修改$this->helper()和$this->config()把配置变量放到$this->config避免与全局变量冲突
2.在支持代码提示的IDE中，例如Netbeans，增加了$this->db->...的数据库方法提示
升级提示:无

ver 2.1.10:
修复了:
1.在PHP5.4及以上版本中的notice问题 Strict Standards: Declaration of xxx。
增加了:
1.命令行支持
2.mysqli驱动支持
升级提示:无

ver 2.1.9beta2:

修复了:
1.$this->view()不传递数据时，$this->view_vars无效的问题。
增加了:无
升级提示:无

ver 2.1.9beta:
修复了:
1.router的注入时机，使得在父类的构造方法之后即可使用路由信息。
增加了:
1.控制器中$this->view_vars['vars']='xxx';可以向$this->view_vars添加附加的视图数据，该数据会在显示视图的时候附加到视图数据里面。
升级提示:无

ver 2.1.8:
修复了:找不到library class的提示信息。
增加了:$this->router;包含了所有的路由信息。
升级提示:无
