<?php
/**
 * MicroPHP
 *
 * An open source application development framework for PHP 5.2.0 or newer
 *
 * @package		MicroPHP
 * @author		狂奔的蜗牛
 * @email		672308444@163.com
 * @copyright           Copyright (c) 2013 - 2013, 狂奔的蜗牛, Inc.
 * @link		http://git.oschina.net/snail/microphp
 * @since		Version 2.2.8
 * @createdtime         2014-05-28 16:55:09
 */
 
 if (!function_exists('dump')) { function dump($arg, $_ = null) { $args = func_get_args(); if (WoniuInput::isCli()) { call_user_func_array('var_dump', $args); } else { echo '<pre>'; call_user_func_array('var_dump', $args); echo '</pre>'; } } } if (!function_exists('table')) { function table($table_name, $db = null) { return WoniuTableModel::M($table_name, $db); } } if (!function_exists('url')) { function url() { $action = null; $argc = func_num_args(); if ($argc > 0) { $action = func_get_arg(0); } $args = array(); $get_str_arr = array(); if ($argc > 1) { for ($i = 1; $i < $argc; $i++) { if (is_array($arg = func_get_arg($i))) { foreach ($arg as $k => $v) { $get_str_arr[] = $k . '=' . urlencode($v); } } else { $args[] = $arg; } } } if (empty(WoniuLoader::$system['url_rewrite'])) { $self_name = stripos($action, '#') === 0 || stripos($action, '#') === 1 ? pathinfo(WoniuInput::server('php_self'), PATHINFO_BASENAME) : ''; $app_start = '?'; $get_start = '&'; } else { $self_name = ''; $app_start = ''; $get_start = '?'; } $path = (stripos($action, '?') === 0 || stripos($action, '?') === 1 ? '' : urlPath() . '/' ); $action = ltrim($action, '#?'); $url_app = $path . $self_name . (empty($args) && empty($get_str_arr) && empty($action) ? '' : $app_start) . ($action . (empty($args) || empty($action) ? '' : '/' ) . implode('/', $args)) . (empty($get_str_arr) ? '' : $get_start . implode('&', $get_str_arr)); return str_replace('?&', '?', $url_app); } } if (!function_exists('urlPath')) { function urlPath($subpath = null) { if (WoniuInput::isCli()) { throw new Exception('function urlPath() can not be used in cli mode'); } else { $old_path = getcwd(); $root = str_replace(array("/", "\\"), '/', WoniuInput::server('DOCUMENT_ROOT')); chdir($root); $root = getcwd(); $root = str_replace(array("/", "\\"), '/', $root); chdir($old_path); $path = path($subpath); return str_replace($root, '', $path); } } } if (!function_exists('path')) { function path($subpath = null) { $path = str_replace(array("/", "\\"), '/', realpath('.') . ($subpath ? '/' . trim($subpath, '/\\') : '')); return truepath($path); } } if (!function_exists('systemInfo')) { function systemInfo($key = NULL) { if (is_null($key)) { return WoniuLoader::$system; } elseif (isset(WoniuLoader::$system[$key])) { return WoniuLoader::$system[$key]; } else { return null; } } } if (!function_exists('dbInfo')) { function dbInfo($group = NULL, $key = NULL) { if (is_null($group)) { $cfg = WoniuLoader::$system['db'][WoniuLoader::$system['db']['active_group']]; if (is_null($key)) { return $cfg; } else { return isset($cfg[$key]) ? $cfg[$key] : null; } } elseif (isset(WoniuLoader::$system['db'][$group])) { $cfg = WoniuLoader::$system['db'][$group]; if (is_null($key)) { return $cfg; } else { return isset($cfg[$key]) ? $cfg[$key] : null; } } else { return null; } } } if (!function_exists('sessionStart')) { function sessionStart() { if (!isset($_SESSION)) { session_start(); } } } if (!function_exists('getInstance')) { function &getInstance() { return WoniuController::getInstance(); } } if (!function_exists('trigger404')) { function trigger404($msg = '<h1>Not Found</h1>') { $system = WoniuLoader::$system; if (!headers_sent()) { header('HTTP/1.1 404 NotFound'); } if (!empty($system['error_page_404']) && file_exists($system['error_page_404'])) { include $system['error_page_404']; } else { echo $msg; } exit(); } } if (!function_exists('truepath')) { function truepath($path) { $unipath = PATH_SEPARATOR == ':'; if (strpos($path, ':') === false && strlen($path) && $path{0} != '/') { $path = realpath('.') . DIRECTORY_SEPARATOR . $path; } $path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path); $parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen'); $absolutes = array(); foreach ($parts as $part) { if ('.' == $part) continue; if ('..' == $part) { array_pop($absolutes); } else { $absolutes[] = $part; } } $path = implode(DIRECTORY_SEPARATOR, $absolutes); $path = $unipath ? (strlen($path) && $path{0} != '/' ? '/' . $path : $path) : $path; $path = str_replace(array('/', '\\'), '/', $path); return $path; } } if (!function_exists('convertPath')) { function convertPath($path) { return str_replace(array("\\", "/"), '/', $path); } } if (!function_exists('trigger500')) { function trigger500($msg = '<h1>Server Error</h1>') { $system = WoniuLoader::$system; if (!headers_sent()) { header('HTTP/1.1 500 Server Error'); } if (!empty($system['error_page_50x']) && file_exists($system['error_page_50x'])) { include $system['error_page_50x']; } else { echo $msg; } exit(); } } if (!function_exists('woniu_exception_handler')) { function woniu_exception_handler($exception) { $errno = $exception->getCode(); $errfile = pathinfo($exception->getFile(), PATHINFO_FILENAME); $errline = $exception->getLine(); $errstr = $exception->getMessage(); $system = WoniuLoader::$system; if ($system['log_error']) { $handle = $system['log_error_handle']['exception']; if (!empty($handle)) { if (is_array($handle)) { $class = key($handle); $method = $handle[$class]; $rclass_obj = new ReflectionClass($class); $rclass_obj = $rclass_obj->newInstanceArgs(); if (method_exists($rclass_obj, $method)) { $rclass_obj->{$method}($errno, $errstr, $errfile, $errline, get_strace()); } } else { if (function_exists($handle)) { $handle($errno, $errstr, $errfile, $errline, get_strace()); } } } } if ($system['debug']) { trigger500('<pre>' . format_error($errno, $errstr, $errfile, $errline) . '</pre>'); } exit; } } if (!function_exists('woniu_error_handler')) { function woniu_error_handler($errno, $errstr, $errfile, $errline) { if (!error_reporting()) { return; } $fatal_err = array(E_ERROR, E_USER_ERROR, E_COMPILE_ERROR, E_CORE_ERROR, E_PARSE, E_RECOVERABLE_ERROR); if (in_array($errno, $fatal_err)) { return true; } $system = WoniuLoader::$system; if ($system['log_error']) { $handle = $system['log_error_handle']['error']; if (!empty($handle)) { if (is_array($handle)) { $class = key($handle); $method = $handle[$class]; $rclass_obj = new ReflectionClass($class); $rclass_obj = $rclass_obj->newInstanceArgs(); if (method_exists($rclass_obj, $method)) { $rclass_obj->{$method}($errno, $errstr, $errfile, $errline, get_strace()); } } else { if (function_exists($handle)) { $handle($errno, $errstr, $errfile, $errline, get_strace()); } } } } if ($system['debug']) { echo '<pre>' . format_error($errno, $errstr, $errfile, $errline) . '</pre>'; } } } if (!function_exists('woniu_fatal_handler')) { function woniu_fatal_handler() { $system = WoniuLoader::$system; $errfile = "unknown file"; $errstr = "shutdown"; $errno = E_CORE_ERROR; $errline = 0; $error = error_get_last(); $fatal_err = array(E_ERROR, E_USER_ERROR, E_COMPILE_ERROR, E_CORE_ERROR, E_PARSE, E_RECOVERABLE_ERROR); if ($error !== NULL && isset($error["type"]) && in_array($error["type"], $fatal_err)) { $errno = $error["type"]; $errfile = $error["file"]; $errline = $error["line"]; $errstr = $error["message"]; if ($system['log_error']) { $handle = $system['log_error_handle']['error']; if (!empty($handle)) { if (is_array($handle)) { $class = key($handle); $method = $handle[$class]; $rclass_obj = new ReflectionClass($class); $rclass_obj = $rclass_obj->newInstanceArgs(); if (method_exists($rclass_obj, $method)) { $rclass_obj->{$method}($errno, $errstr, $errfile, $errline, get_strace()); } } else { if (function_exists($handle)) { $handle($errno, $errstr, $errfile, $errline, get_strace()); } } } } if ($system['debug']) { trigger500('<pre>' . format_error($errno, $errstr, $errfile, $errline) . '</pre>'); } exit; } } } if (!function_exists('woniu_db_error_handler')) { function woniu_db_error_handler($error) { $msg = ''; if (is_array($error)) { foreach ($error as $m) { $msg.=$m . "\n"; } } else { $msg = $error; } $system = WoniuLoader::$system; $woniu_db = WoniuLoader::$system['db']; if ($system['log_error']) { $handle = $system['log_error_handle']['db_error']; if (!empty($handle)) { if (is_array($handle)) { $class = key($handle); $method = $handle[$class]; $rclass_obj = new ReflectionClass($class); $rclass_obj = $rclass_obj->newInstanceArgs(); if (method_exists($rclass_obj, $method)) { $rclass_obj->{$method}($msg, get_strace(TRUE)); } } else { if (function_exists($handle)) { $handle($msg, get_strace(TRUE)); } } } } if ($woniu_db[$woniu_db['active_group']]['db_debug'] && $system['debug']) { if (!empty($system['error_page_db']) && file_exists($system['error_page_db'])) { include $system['error_page_db']; } else { echo '<pre>' . $msg . get_strace(TRUE) . '</pre>'; } exit; } } } if (!function_exists('format_error')) { function format_error($errno, $errstr, $errfile, $errline) { $path = truepath(WoniuLoader::$system['application_folder']); $path.=empty($path) ? '' : '/'; $array_map = array('0' => 'EXCEPTION', '1' => 'ERROR', '2' => 'WARNING', '4' => 'PARSE', '8' => 'NOTICE', '16' => 'CORE_ERROR', '32' => 'CORE_WARNING', '64' => 'COMPILE_ERROR', '128' => 'COMPILE_WARNING', '256' => 'USER_ERROR', '512' => 'USER_WARNING', '1024' => 'USER_NOTICE', '2048' => 'STRICT', '4096' => 'RECOVERABLE_ERROR', '8192' => 'DEPRECATED', '16384' => 'USER_DEPRECATED'); $trace = get_strace(); $content = ''; $content .= "错误信息:" . nl2br($errstr) . "\n"; $content .= "出错文件:" . str_replace($path, '', $errfile) . "\n"; $content .= "出错行数:{$errline}\n"; $content .= "错误代码:{$errno}\n"; $content .= "错误类型:{$array_map[$errno]}\n"; if (!empty($trace)) { $content .= "调用信息:{$trace}\n"; } return $content; } } if (!function_exists('get_strace')) { function get_strace($is_db = false) { $trace = debug_backtrace(false); foreach ($trace as $t) { if (!in_array($t['function'], array('display_error', 'woniu_db_error_handler', 'woniu_fatal_handler', 'woniu_error_handler', 'woniu_exception_handler'))) { array_shift($trace); } else { array_shift($trace); break; } } if ($is_db) { array_shift($trace); } array_pop($trace); array_pop($trace); $str = ''; $path = truepath(WoniuLoader::$system['application_folder']); $path.=empty($path) ? '' : '/'; foreach ($trace as $k => $e) { $file = !empty($e['file']) ? "File:" . str_replace($path, '', $e['file']) . "\n" : ''; $line = !empty($e['line']) ? "   Line:{$e['line']}\n" : ''; $space = (empty($file) && empty($line) ? '' : '   '); $func = $space . (!empty($e['class']) ? "Function:{$e['class']}{$e['type']}{$e['function']}()\n" : "Function:{$e['function']}()\n"); $str.="\n#{$k} {$file}{$line}{$func}"; } return $str; } } if (!function_exists('stripslashes_all')) { function stripslashes_all() { if (!get_magic_quotes_gpc()) { return; } $strip_list = array('_GET', '_POST', '_COOKIE'); foreach ($strip_list as $val) { global $$val; $$val = stripslashes2($$val); } } } if (!function_exists('stripslashes2')) { function stripslashes2($var) { if (!get_magic_quotes_gpc()) { return $var; } if (is_array($var)) { foreach ($var as $key => $val) { if (is_array($val)) { $var[$key] = stripslashes2($val); } else { $var[$key] = stripslashes($val); } } } elseif (is_string($var)) { $var = stripslashes($var); } return $var; } } if (!function_exists('is_php')) { function is_php($version = '5.0.0') { static $_is_php; $version = (string) $version; if (!isset($_is_php[$version])) { $_is_php[$version] = (version_compare(PHP_VERSION, $version) < 0) ? FALSE : TRUE; } return $_is_php[$version]; } } if (!function_exists('forceDownload')) { function forceDownload($filename = '', $data = '') { if ($filename == '' OR $data == '') { return FALSE; } if (FALSE === strpos($filename, '.')) { return FALSE; } $x = explode('.', $filename); $extension = end($x); $mimes = array('hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'csv' => array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel'), 'bin' => 'application/macbinary', 'dms' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'exe' => array('application/octet-stream', 'application/x-msdownload'), 'class' => 'application/octet-stream', 'psd' => 'application/x-photoshop', 'so' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => array('application/pdf', 'application/x-download'), 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => array('application/excel', 'application/vnd.ms-excel', 'application/msexcel'), 'ppt' => array('application/powerpoint', 'application/vnd.ms-powerpoint'), 'wbxml' => 'application/wbxml', 'wmlc' => 'application/wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'gz' => 'application/x-gzip', 'php' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php3' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'js' => 'application/x-javascript', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => array('application/x-tar', 'application/x-gzip-compressed'), 'xhtml' => 'application/xhtml+xml', 'xht' => 'application/xhtml+xml', 'zip' => array('application/x-zip', 'application/zip', 'application/x-zip-compressed'), 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mpga' => 'audio/mpeg', 'mp2' => 'audio/mpeg', 'mp3' => array('audio/mpeg', 'audio/mpg', 'audio/mpeg3', 'audio/mp3'), 'aif' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'rv' => 'video/vnd.rn-realvideo', 'wav' => 'audio/x-wav', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => array('image/jpeg', 'image/pjpeg'), 'jpg' => array('image/jpeg', 'image/pjpeg'), 'jpe' => array('image/jpeg', 'image/pjpeg'), 'png' => array('image/png', 'image/x-png'), 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'txt' => 'text/plain', 'text' => 'text/plain', 'log' => array('text/plain', 'text/x-log'), 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'qt' => 'video/quicktime', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'doc' => 'application/msword', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'word' => array('application/msword', 'application/octet-stream'), 'xl' => 'application/excel', 'eml' => 'message/rfc822', 'json' => array('application/json', 'text/json')); if (!isset($mimes[$extension])) { $mime = 'application/octet-stream'; } else { $mime = (is_array($mimes[$extension])) ? $mimes[$extension][0] : $mimes[$extension]; } header('Content-Type: "' . $mime . '"'); $tmpName = $filename; $filename = '"' . urlencode($tmpName) . '"'; if (strstr(strtolower($_SERVER['HTTP_USER_AGENT']), 'firefox') != false) { $filename = '"' . $tmpName . '"'; } if (strstr(strtolower($_SERVER['HTTP_USER_AGENT']), 'chrome') != false) { $filename = urlencode($tmpName); } header('Content-Disposition: attachment; filename=' . $filename); header('Expires: 0'); header('Cache-Control: must-revalidate, post-check=0, pre-check=0'); header("Content-Transfer-Encoding: binary"); header('Pragma: no-cache'); header("Content-Length: " . strlen($data)); exit($data); } } if (!function_exists('getRsCol')) { function getRsCol($rows, $col_name) { $ret = array(); foreach ($rows as &$row) { $ret[] = $row[$col_name]; } return $ret; } } if (!function_exists('chRsKey')) { function chRsKey($rs, $col) { $_rs = array(); foreach ($rs as $v) { $_rs[$v[$col]] = $v; } return $_rs; } } if (!function_exists('sortRs')) { function sortRs($rows, $key, $order = 'asc') { $sort = array(); foreach ($rows as $k => $value) { $sort[$k] = $value[$key]; } $order == 'asc' ? asort($sort) : arsort($sort); $ret = array(); foreach ($sort as $k => $value) { $ret[] = $rows[$k]; } return $ret; } } if (!function_exists('mergeRs')) { function mergeRs() { $argv = func_get_args(); $argc = count($argv); $ret = array(); foreach ($argv[0][0] as $v) { $r = $v; for ($j = 1; $j < $argc; $j++) { foreach ($argv[$j][0] as $row) { if ($v[$argv[0][1]] == $row[$argv[$j][1]]) { $r = array_merge($r, $row); break; } } } $ret[] = $r; } $allkeys = array(); foreach ($argv as $rs) { foreach (array_keys($rs[0][0]) as $key) { $allkeys[] = $key; } } foreach ($ret as &$row) { foreach ($allkeys as $key) { if (!isset($row[$key])) { $row[$key] = null; } } } return $ret; } } if (!function_exists('enableSelectDefault')) { function enableSelectDefault($return = false) { $js = '<script>var func0797986876;if(typeof(window.onload)=="function"){func0797986876=window.onload};window.onload=function(){func0797986876?func0797986876():null;var b=document.getElementsByTagName("select");var c=function(){for(var k=0;k<b.length;k++){var s=b[k];var a=s.attributes["default"]?s.attributes["default"].value:null;if(a){for(var i=0;i<s.length;i++){if(s[i].value==a){s[i].selected=true;break;}}}}};c();window["select_default"]=c;};</script>'; if ($return) { return $js; } else { echo $js; } } } class WoniuInput { public static $router; public static function module_name() { return self::$router['module']; } public static function method_path() { return self::$router['mpath']; } public static function method_name() { return self::$router['m']; } public static function method_prefix() { return self::$router['prefix']; } public static function controller_path() { return self::$router['cpath']; } public static function controller_name() { return self::$router['c']; } public static function folder_name() { return self::$router['folder']; } public static function controller_file() { return self::$router['file']; } public static function class_name() { return self::$router['class']; } public static function class_method_name() { return self::$router['method']; } public static function parameters($key = null) { if (!is_null($key)) { if (isset(self::$router['parameters'][$key])) { return self::$router['parameters'][$key]; } else { return null; } } else { return self::$router['parameters']; } } private static function get_x_type($rule, $method, $key) { $val = null; switch ($method) { case 'get': $val = self::get($key); break; case 'post': $val = self::post($key); break; case 'get_post': $val = self::get_post($key); break; case 'post_get': $val = self::post_get($key); break; } if (is_null(WoniuLoader::checkData($rule, array('check' => $val)))) { return $val; } else { return null; } } private static function get_rule_type($rule, $method, $key, $default = null) { if (!is_array($rule)) { $_rule = array($rule => 'err'); } else { $_rule = array(); foreach ($rule as $r) { $_rule[$r] = 'err'; } } $rule = array('check' => $_rule); $val = self::get_x_type($rule, $method, $key); return is_null($val) ? $default : $val; } public static function get_rule($rule, $key, $default = null) { return self::get_rule_type($rule, 'get', $key, $default); } public static function post_rule($rule, $key, $default = null) { return self::get_rule_type($rule, 'post', $key, $default); } public static function get_post_rule($rule, $key, $default = null) { return self::get_rule_type($rule, 'get_post', $key, $default); } public static function post_get_rule($rule, $key, $default = null) { return self::get_rule_type($rule, 'post_get', $key, $default); } private static function get_int_type($method, $key, $min = null, $max = null, $default = null) { $val = self::get_rule_type(WoniuRule::int(), $method, $key); $min_okay = is_null($min) || (!is_null($min) && $val >= $min); $max_okay = is_null($max) || (!is_null($max) && $val <= $max); return $min_okay && $max_okay ? $val : $default; } public static function get_int($key, $min = null, $max = null, $default = null) { return self::get_int_type('get', $key, $min, $max, $default); } public static function post_int($key, $min = null, $max = null, $default = null) { return self::get_int_type('post', $key, $min, $max, $default); } public static function get_post_int($key, $min = null, $max = null, $default = null) { return self::get_int_type('get_post', $key, $min, $max, $default); } public static function post_get_int($key, $min = null, $max = null, $default = null) { return self::get_int_type('post_get', $key, $min, $max, $default); } private static function get_date_type($method, $key, $min = null, $max = null, $default = null) { $val = self::get_rule_type(WoniuRule::date(), $method, $key); $min_okay = is_null($min) || (!is_null($min) && strtotime($val) >= strtotime($min)); $max_okay = is_null($max) || (!is_null($max) && strtotime($val) <= strtotime($max)); return $min_okay && $max_okay ? $val : $default; } public static function get_date($key, $min = null, $max = null, $default = null) { return self::get_date_type('get', $key, $min, $max, $default); } public static function post_date($key, $min = null, $max = null, $default = null) { return self::get_date_type('post', $key, $min, $max, $default); } public static function get_post_date($key, $min = null, $max = null, $default = null) { return self::get_date_type('get_post', $key, $min, $max, $default); } public static function post_get_date($key, $min = null, $max = null, $default = null) { return self::get_date_type('post_get', $key, $min, $max, $default); } private static function get_time_type($method, $key, $min = null, $max = null, $default = null) { $val = self::get_rule_type(WoniuRule::time(), $method, $key); $pre_fix = '2014-01-01 '; $min_okay = is_null($min) || (!is_null($min) && strtotime($pre_fix . $val) >= strtotime($pre_fix . $min)); $max_okay = is_null($max) || (!is_null($max) && strtotime($pre_fix . $val) <= strtotime($pre_fix . $max)); return $min_okay && $max_okay ? $val : $default; } public static function get_time($key, $min = null, $max = null, $default = null) { return self::get_time_type('get', $key, $min, $max, $default); } public static function post_time($key, $min = null, $max = null, $default = null) { return self::get_time_type('post', $key, $min, $max, $default); } public static function get_post_time($key, $min = null, $max = null, $default = null) { return self::get_time_type('get_post', $key, $min, $max, $default); } public static function post_get_time($key, $min = null, $max = null, $default = null) { return self::get_time_type('post_get', $key, $min, $max, $default); } private static function get_datetime_type($method, $key, $min = null, $max = null, $default = null) { $val = self::get_rule_type(WoniuRule::datetime(), $method, $key); $min_okay = is_null($min) || (!is_null($min) && strtotime($val) >= strtotime($min)); $max_okay = is_null($max) || (!is_null($max) && strtotime($val) <= strtotime($max)); return $min_okay && $max_okay ? $val : $default; } public static function get_datetime($key, $min = null, $max = null, $default = null) { return self::get_datetime_type('get', $key, $min, $max, $default); } public static function post_datetime($key, $min = null, $max = null, $default = null) { return self::get_datetime_type('post', $key, $min, $max, $default); } public static function get_post_datetime($key, $min = null, $max = null, $default = null) { return self::get_datetime_type('get_post', $key, $min, $max, $default); } public static function post_get_datetime($key, $min = null, $max = null, $default = null) { return self::get_datetime_type('post_get', $key, $min, $max, $default); } public static function get_post($key = null, $default = null, $xss_clean = false) { $get = self::gpcs('_GET', $key, $default); $val = $get === null ? self::gpcs('_POST', $key, $default) : $get; return $xss_clean ? self::xss_clean($val) : $val; } public static function post_get($key = null, $default = null, $xss_clean = false) { $get = self::gpcs('_POST', $key, $default); $val = $get === null ? self::gpcs('_GET', $key, $default) : $get; return $xss_clean ? self::xss_clean($val) : $val; } public static function get($key = null, $default = null, $xss_clean = false) { $val = self::gpcs('_GET', $key, $default); return $xss_clean ? self::xss_clean($val) : $val; } public static function post($key = null, $default = null, $xss_clean = false) { $val = self::gpcs('_POST', $key, $default); return $xss_clean ? self::xss_clean($val) : $val; } public static function cookie($key = null, $default = null, $xss_clean = false) { $key = systemInfo('cookie_key_prefix') . $key; return self::cookieRaw($key, $default, $xss_clean); } public static function cookieRaw($key = null, $default = null, $xss_clean = false) { $val = self::gpcs('_COOKIE', $key, $default); return $xss_clean ? self::xss_clean($val) : $val; } public static function session($key = null, $default = null) { return self::gpcs('_SESSION', $key, $default); } public static function server($key = null, $default = null) { $key = !is_null($key) ? strtoupper($key) : null; return self::gpcs('_SERVER', $key, $default); } private static function gpcs($range, $key, $default) { global $$range; if ($key === null) { return $$range; } else { $range = $$range; return isset($range[$key]) ? $range[$key] : ( $default !== null ? $default : null); } } public static function isCli() { return php_sapi_name() == 'cli'; } public static function is_cli() { return self::isCli(); } public static function is_ajax() { return (self::server('HTTP_X_REQUESTED_WITH') === 'XMLHttpRequest'); } public static function xss_clean($val) { $val = preg_replace('/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/', '', $val); $search = 'abcdefghijklmnopqrstuvwxyz'; $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; $search .= '1234567890!@#$%^&*()'; $search .= '~`";:?+/={}[]-_|\'\\'; for ($i = 0; $i < strlen($search); $i++) { $val = preg_replace('/(&#[xX]0{0,8}' . dechex(ord($search[$i])) . ';?)/i', $search[$i], $val); $val = preg_replace('/(&#0{0,8}' . ord($search[$i]) . ';?)/', $search[$i], $val); } $ra1 = array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'style', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base'); $ra2 = array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload'); $ra = array_merge($ra1, $ra2); $found = true; while ($found == true) { $val_before = $val; for ($i = 0; $i < sizeof($ra); $i++) { $pattern = '/'; for ($j = 0; $j < strlen($ra[$i]); $j++) { if ($j > 0) { $pattern .= '('; $pattern .= '(&#[xX]0{0,8}([9ab]);)'; $pattern .= '|'; $pattern .= '|(&#0{0,8}([9|10|13]);)'; $pattern .= ')*'; } $pattern .= $ra[$i][$j]; } $pattern .= '/i'; $replacement = substr($ra[$i], 0, 2) . '<x>' . substr($ra[$i], 2); $val = preg_replace($pattern, $replacement, $val); if ($val_before == $val) { $found = false; } } } return $val; } } class WoniuRouter { public static function loadClass() { $system = WoniuLoader::$system; $methodInfo = self::parseURI(); WoniuLoader::classAutoloadRegister(); if (file_exists($methodInfo['file'])) { include $methodInfo['file']; WoniuInput::$router = $methodInfo; if (!WoniuInput::isCli()) { self::checkSession(); } $class = new $methodInfo['class'](); if (method_exists($class, $methodInfo['method'])) { $methodInfo['parameters'] = is_array($methodInfo['parameters']) ? $methodInfo['parameters'] : array(); if (method_exists($class, '__output')) { ob_start(); call_user_func_array(array($class, $methodInfo['method']), $methodInfo['parameters']); $buffer = ob_get_contents(); @ob_end_clean(); call_user_func_array(array($class, '__output'), array($buffer)); } else { call_user_func_array(array($class, $methodInfo['method']), $methodInfo['parameters']); } } else { trigger404($methodInfo['class'] . ':' . $methodInfo['method'] . ' not found.'); } } else { if ($system['debug']) { trigger404('file:' . $methodInfo['file'] . ' not found.'); } else { trigger404(); } } } private static function parseURI() { $pathinfo_query = self::getQueryStr(); $router['module']= self::getHmvcModuleName($pathinfo_query); $pathinfo_query = self::checkHmvc($pathinfo_query); $pathinfo_query = self::checkRouter($pathinfo_query); $system = WoniuLoader::$system; $class_method = $system['default_controller'] . '.' . $system['default_controller_method']; if (!empty($pathinfo_query)) { $pathinfo_query{0} === '/' ? $pathinfo_query = substr($pathinfo_query, 1) : null; $requests = explode("/", $pathinfo_query); preg_match('/[^&]+(?:\.[^&]+)+/', $requests[0]) ? $class_method = $requests[0] : null; if (strstr($class_method, '&') !== false) { $cm = explode('&', $class_method); $class_method = $cm[0]; } } $pathinfo_query = str_replace($class_method, '', $pathinfo_query); $pathinfo_query_parameters = explode("&", $pathinfo_query); $pathinfo_query_parameters_str = !empty($pathinfo_query_parameters[0]) ? $pathinfo_query_parameters[0] : ''; $pathinfo_query_parameters_str && $pathinfo_query_parameters_str{0} === '/' ? $pathinfo_query_parameters_str = substr($pathinfo_query_parameters_str, 1) : ''; $origin_class_method = $class_method; $class_method = explode(".", $class_method); $method = end($class_method); $method = $system['controller_method_prefix'] . ($system['controller_method_ucfirst'] ? ucfirst($method) : $method); unset($class_method[count($class_method) - 1]); $file = $system['controller_folder'] . DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $class_method) . $system['controller_file_subfix']; $class = $class_method[count($class_method) - 1]; $parameters = explode("/", $pathinfo_query_parameters_str); if (count($parameters) === 1 && (empty($parameters[0]) || strpos($parameters[0], '=') !== false)) { $parameters = array(); } foreach ($parameters as $key => $value) { $parameters[$key] = urldecode($value); } $info = array('file' => $file, 'class' => ucfirst($class), 'method' => str_replace('.', '/', $method), 'parameters' => $parameters); $path = explode('.', $origin_class_method); $router['mpath'] = $origin_class_method; $router['m'] = $path[count($path) - 1]; $router['c'] = ''; if (count($path) > 1) { $router['c'] = $path[count($path) - 2]; } $router['prefix'] = $system['controller_method_prefix']; unset($path[count($path) - 1]); $router['cpath'] = empty($path) ? '' : implode('.', $path); $router['folder'] = ''; if (count($path) > 1) { unset($path[count($path) - 1]); $router['folder'] = implode('.', $path); } return $router + $info; } private static function getQueryStr() { $system = WoniuLoader::$system; if (WoniuInput::isCli()) { global $argv; $pathinfo_query = isset($argv[1]) ? $argv[1] : ''; } else { $pathinfo = @parse_url($_SERVER['REQUEST_URI']); if (empty($pathinfo)) { if ($system['debug']) { trigger404('request parse error:' . $_SERVER['REQUEST_URI']); } else { trigger404(); } } $query_str = empty($pathinfo['query']) ? '' : $pathinfo['query']; $pathinfo_query = empty($_SERVER['PATH_INFO']) ? $query_str : $_SERVER['PATH_INFO'] . '&' . $query_str; } if ($pathinfo_query) { $pathinfo_query = trim($pathinfo_query, '/&'); } return $pathinfo_query; } private static function checkSession() { $system = WoniuLoader::$system; if (!empty($system['session_handle']['handle']) && isset($system['session_handle'][$system['session_handle']['handle']]) ) { $driver = $system['session_handle']['handle']; $config = $system['session_handle']; $handle = ucfirst($driver) . 'SessionHandle'; $session = new $handle(); $session->start($config); } } private static function checkRouter($pathinfo_query) { $system = WoniuLoader::$system; if (is_array($system['route'])) { foreach ($system['route'] as $reg => $replace) { if (preg_match($reg, $pathinfo_query)) { $pathinfo_query = preg_replace($reg, $replace, $pathinfo_query); break; } } } return $pathinfo_query; } private static function checkHmvc($pathinfo_query) { if ($_module = self::getHmvcModuleName($pathinfo_query)) { $_system = WoniuLoader::$system; self::switchHmvcConfig($_system['hmvc_modules'][$_module]); return preg_replace('|^' . $_module . '[\./&]?|', '', $pathinfo_query); } return $pathinfo_query; } private static function getHmvcModuleName($pathinfo_query) { $_module = current(explode('&', $pathinfo_query)); $_module = current(explode('/', $_module)); $_system = WoniuLoader::$system; if (isset($_system['hmvc_modules'][$_module])) { return $_module; } else { return ''; } } public static function switchHmvcConfig($hmvc_folder) { $_system = $system = WoniuLoader::$system; $module = $_system['hmvc_folder'] . '/' . $hmvc_folder . '/hmvc.php'; include($module); foreach (array('model_folder', 'view_folder', 'library_folder', 'helper_folder', 'helper_file_autoload', 'library_file_autoload', 'models_file_autoload') as $folder) { if (!is_array($_system[$folder])) { $_system[$folder] = array($_system[$folder]); } if (!is_array($system[$folder])) { $system[$folder] = array($system[$folder]); } $system[$folder] = array_merge($system[$folder], $_system[$folder]); } WoniuLoader::$system = $system; } public static function setConfig($system) { $system['application_folder'] = truepath($system['application_folder']); WoniuLoader::$system = $system; self::folderAutoInit(); } private static function folderAutoInit() { if (!empty(WoniuLoader::$system['folder_auto_init'])) { $folder = array('application_folder', 'controller_folder', 'model_folder', 'view_folder', 'library_folder', 'helper_folder', 'hmvc_folder'); foreach (WoniuLoader::$system as $key => $value) { if (in_array($key, $folder)) { if (!is_dir($value)) { mkdir($value, 0755, true); chmod($value, 0755); } } } } } } class WoniuLoader { public $model, $lib, $router, $db, $input, $view_vars = array(), $cache, $rule; private static $helper_files = array(), $files = array(); private static $instance, $config = array(); public static $system; public function __construct() { $system = WoniuLoader::$system; date_default_timezone_set($system['default_timezone']); $this->registerErrorHandle(); $this->router = WoniuInput::$router; $this->input = new WoniuInput(); $this->model = new WoniuModelLoader(); $this->lib = new WoniuLibLoader(); $this->rule = new WoniuRule(); phpFastCache::setup($system['cache_config']); $this->cache = phpFastCache($system['cache_config']['storage']); if ($system['autoload_db']) { $this->database(); } stripslashes_all(); } public function registerErrorHandle() { $system = WoniuLoader::$system; error_reporting(E_ALL); if ($system['debug']) { ini_set('display_errors', true); } else { ini_set('display_errors', FALSE); } if ($system['error_manage'] || $system['log_error']) { set_exception_handler('woniu_exception_handler'); set_error_handler('woniu_error_handler'); register_shutdown_function('woniu_fatal_handler'); } } public static function config($config_group, $key = null) { if (!is_null($key)) { return isset(self::$config[$config_group][$key]) ? self::$config[$config_group][$key] : null; } else { return isset(self::$config[$config_group]) ? self::$config[$config_group] : null; } } public function database($config = NULL, $is_return = false, $force_new_conn = false) { $woniu_db = self::$system['db']; $db_cfg_key = $woniu_db['active_group']; if (is_string($config) && !empty($config)) { $db_cfg = $woniu_db[$config]; } elseif (is_array($config)) { $db_cfg = $config; } else { $db_cfg = $woniu_db[$db_cfg_key]; } if ($is_return) { return WoniuDB::getInstance($db_cfg, $force_new_conn); } else { if ($force_new_conn || !is_object($this->db)) { return $this->db = WoniuDB::getInstance($db_cfg, $force_new_conn); } return $this->db; } } public function setConfig($key, $val) { self::$config[$key] = $val; } public static function helper($file_name) { $system = WoniuLoader::$system; $helper_folders = $system['helper_folder']; if (!is_array($helper_folders)) { $helper_folders = array($helper_folders); } $count = count($helper_folders); foreach ($helper_folders as $k => $helper_folder) { $filename = $helper_folder . DIRECTORY_SEPARATOR . $file_name . $system['helper_file_subfix']; $filename = convertPath($filename); if (in_array($filename, self::$helper_files)) { return; } if (file_exists($filename)) { self::$helper_files[] = $filename; $before_vars = array_keys(get_defined_vars()); $before_vars[] = 'before_vars'; include($filename); $vars = get_defined_vars(); $all_vars = array_keys($vars); foreach ($all_vars as $key) { if (!in_array($key, $before_vars) && isset($vars[$key])) { self::$config[$key] = $vars[$key]; } } break; } else { if (($count - 1) == $k) { trigger404($filename . ' not found.'); } } } } public static function lib($file_name, $alias_name = null) { $system = WoniuLoader::$system; $classname = $file_name; if (strstr($file_name, '/') !== false || strstr($file_name, "\\") !== false) { $classname = basename($file_name); } if (!$alias_name) { $alias_name = $classname; } $library_folders = $system['library_folder']; if (!is_array($library_folders)) { $library_folders = array($library_folders); } $count = count($library_folders); foreach ($library_folders as $key => $library_folder) { $filepath = $library_folder . DIRECTORY_SEPARATOR . $file_name . $system['library_file_subfix']; if (in_array($alias_name, array_keys(WoniuLibLoader::$lib_files))) { return WoniuLibLoader::$lib_files[$alias_name]; } else { foreach (WoniuLibLoader::$lib_files as $aname => $obj) { if (strtolower(get_class($obj)) === strtolower($classname)) { return WoniuLibLoader::$lib_files[$alias_name] = WoniuLibLoader::$lib_files[$aname]; } } } if (file_exists($filepath)) { self::includeOnce($filepath); if (class_exists($classname, FALSE)) { return WoniuLibLoader::$lib_files[$alias_name] = new $classname(); } else { if ($key == $count - 1) { trigger404('Library Class:' . $classname . ' not found.'); } } } else { if ($key == $count - 1) { trigger404($filepath . ' not found.'); } } } } public static function model($file_name, $alias_name = null) { $system = WoniuLoader::$system; $classname = $file_name; if (strstr($file_name, '/') !== false || strstr($file_name, "\\") !== false) { $classname = basename($file_name); } if (!$alias_name) { $alias_name = $classname; } $model_folders = $system['model_folder']; if (!is_array($model_folders)) { $model_folders = array($model_folders); } $count = count($model_folders); foreach ($model_folders as $key => $model_folder) { $filepath = $model_folder . DIRECTORY_SEPARATOR . $file_name . $system['model_file_subfix']; if (in_array($alias_name, array_keys(WoniuModelLoader::$model_files))) { return WoniuModelLoader::$model_files[$alias_name]; } else { foreach (WoniuModelLoader::$model_files as &$obj) { if (strtolower(get_class($obj)) == strtolower($classname)) { return WoniuModelLoader::$model_files[$alias_name] = $obj; } } } if (file_exists($filepath)) { self::includeOnce($filepath); if (class_exists($classname, FALSE)) { return WoniuModelLoader::$model_files[$alias_name] = new $classname(); } else { if ($key == $count - 1) { trigger404('Model Class:' . $classname . ' not found.'); } } } else { if ($key == $count - 1) { trigger404($filepath . ' not  found.'); } } } } public function view($view_name, $data = null, $return = false) { if (is_array($data)) { $this->view_vars = array_merge($this->view_vars, $data); extract($this->view_vars); } elseif (is_array($this->view_vars) && !empty($this->view_vars)) { extract($this->view_vars); } $system = WoniuLoader::$system; $view_folders = $system['view_folder']; if (!is_array($view_folders)) { $view_folders = array($view_folders); } $count = count($view_folders); $i = 0; if (stripos($view_name, ':') !== false) { $info = explode(':', $view_name); $path_key = current($info); $view_name = next($info); if (!isset($system['view_folder'][$path_key])) { trigger404('error key[' . $path_key . '] of $system["view_folder"]'); } else { $dir = $system['view_folder'][$path_key]; $view_path = $dir . DIRECTORY_SEPARATOR . $view_name . $system['view_file_subfix']; if (file_exists($view_path)) { if ($return) { @ob_start(); include $view_path; $html = ob_get_contents(); @ob_end_clean(); return $html; } else { include $view_path; return; } } else { trigger404('View:' . $view_path . ' not found'); } } } else { $view_path = ''; foreach ($view_folders as $dir) { $view_path = $dir . DIRECTORY_SEPARATOR . $view_name . $system['view_file_subfix']; if (file_exists($view_path)) { if ($return) { @ob_start(); include $view_path; $html = ob_get_contents(); @ob_end_clean(); return $html; } else { include $view_path; return; } } elseif (($i++) == $count - 1) { trigger404('View:' . $view_path . ' not found'); } } } } public static function classAutoloadRegister() { $found = false; $__autoload_found = false; $auto_functions = spl_autoload_functions(); if (is_array($auto_functions)) { foreach ($auto_functions as $func) { if (is_array($func) && $func[0] == 'WoniuLoader' && $func[1] == 'classAutoloader') { $found = TRUE; break; } } foreach ($auto_functions as $func) { if (!is_array($func) && $func == '__autoload') { $__autoload_found = TRUE; break; } } } if (function_exists('__autoload') && !$__autoload_found) { spl_autoload_register('__autoload'); } if (!$found) { spl_autoload_register(array('WoniuLoader', 'classAutoloader')); } } public static function classAutoloader($clazzName) { $system = WoniuLoader::$system; $library_folders = $system['library_folder']; if (!is_array($library_folders)) { $library_folders = array($library_folders); } foreach ($library_folders as $library_folder) { $library = $library_folder . DIRECTORY_SEPARATOR . $clazzName . $system['library_file_subfix']; if (file_exists($library)) { self::includeOnce($library); } else { if (is_dir($library_folder)) { $dir = dir($library_folder); $found = false; while (($file = $dir->read()) !== false) { if ($file == '.' || $file == '..' || is_file($library_folder . DIRECTORY_SEPARATOR . $file)) { continue; } $path = truepath($library_folder) . DIRECTORY_SEPARATOR . $file . DIRECTORY_SEPARATOR . $clazzName . $system['library_file_subfix']; if (file_exists($path)) { self::includeOnce($path); $found = true; break; } } if ($found) { break; } } } } } public static function checkUserLoader() { global $system; if (!class_exists('WoniuLoaderPlus', FALSE)) { if (!empty($system['my_loader'])) { self::includeOnce($system['my_loader']); $clazz = basename($system['my_loader'], '.class.php'); if (class_exists($clazz, FALSE)) { eval('class WoniuLoaderPlus extends ' . $clazz . '{}'); } else { eval('class WoniuLoaderPlus extends WoniuLoader{}'); } } else { eval('class WoniuLoaderPlus extends WoniuLoader{}'); } } } public static function instance($renew = null, $hmvc_module_floder = null) { $default = WoniuLoader::$system; if (!empty($hmvc_module_floder)) { WoniuRouter::switchHmvcConfig($hmvc_module_floder); } self::classAutoloadRegister(); WoniuController::instance(); $renew = is_bool($renew) && $renew === true; $ret = empty(self::$instance) || $renew ? self::$instance = new self() : self::$instance; WoniuLoader::$system = $default; return $ret; } public static function view_path($view_name, $path_key = 0) { if (stripos($view_name, ':') !== false) { $info = explode(':', $view_name); $path_key = current($info); $view_name = next($info); } $system = WoniuLoader::$system; if (!is_array($system['view_folder'])) { $system['view_folder'] = array($system['view_folder']); } if (!isset($system['view_folder'][$path_key])) { trigger404('error key[' . $path_key . '] of $system["view_folder"]'); } $dir = $system['view_folder'][$path_key]; $view_path = $dir . DIRECTORY_SEPARATOR . $view_name . $system['view_file_subfix']; return truepath($view_path); } public function ajax_echo($code, $tip = null, $data = null, $jsonp_callback = null, $is_exit = true) { $str = json_encode(array('code' => $code, 'tip' => is_null($tip) ? '' : $tip, 'data' => is_null($data) ? '' : $data)); if (!empty($jsonp_callback)) { echo $jsonp_callback . "($str)"; } else { echo $str; } if ($is_exit) { exit(); } } public static function xml_echo($xml, $is_exit = true) { header('Content-type:text/xml;charset=utf-8'); echo $xml; if ($is_exit) { exit(); } } public function redirect($url, $msg = null, $time = 3, $view = null) { $time = intval($time) ? intval($time) : 3; if (empty($msg)) { header('Location:' . $url); } else { header("refresh:{$time};url={$url}"); header("Content-type: text/html; charset=utf-8"); if (empty($view)) { echo $msg; } else { $this->view($view, array('msg' => $msg, 'url' => $url, 'time' => $time)); } } exit(); } public function message($msg, $url = null, $time = 3, $view = null) { $time = intval($time) ? intval($time) : 3; if (!empty($url)) { header("refresh:{$time};url={$url}"); } header("Content-type: text/html; charset=utf-8"); $view = is_null($view) ? systemInfo('message_page_view') : $view; if (!empty($view)) { $this->view($view, array('msg' => $msg, 'url' => $url, 'time' => $time)); } else { echo $msg; } exit(); } public static function setCookieRaw($key, $value, $life = null, $path = '/', $domian = null, $http_only = false) { header('P3P: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"'); if (!is_null($domian)) { $auto_domain = $domian; } else { $host = WoniuInput::server('HTTP_HOST'); $is_ip = preg_match('/^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/', $host); $not_regular_domain = preg_match('/^[^\\.]+$/', $host); if ($is_ip) { $auto_domain = $host; } elseif ($not_regular_domain) { $auto_domain = NULL; } else { $auto_domain = '.' . $host; } } setcookie($key, $value, ($life ? $life + time() : null), $path, $auto_domain, (WoniuInput::server('SERVER_PORT') == 443 ? 1 : 0), $http_only); $_COOKIE[$key] = $value; } public static function setCookie($key, $value, $life = null, $path = '/', $domian = null, $http_only = false) { $key = systemInfo('cookie_key_prefix') . $key; return self::setCookieRaw($key, $value, $life, $path, $domian, $http_only); } public static function page($total, $page, $pagesize, $url, $order = array(1, 2, 3, 4, 5, 6), $a_count = 10) { $a_num = $a_count; $first = '首页'; $last = '尾页'; $pre = '上页'; $next = '下页'; $a_num = $a_num % 2 == 0 ? $a_num + 1 : $a_num; $pages = ceil($total / $pagesize); $curpage = intval($page) ? intval($page) : 1; $curpage = $curpage > $pages || $curpage <= 0 ? 1 : $curpage; $body = '<span class="page_body">'; $prefix = ''; $subfix = ''; $start = $curpage - ($a_num - 1) / 2; $end = $curpage + ($a_num - 1) / 2; $start = $start <= 0 ? 1 : $start; $end = $end > $pages ? $pages : $end; if ($pages >= $a_num) { if ($curpage <= ($a_num - 1) / 2) { $end = $a_num; } if ($end - $curpage <= ($a_num - 1) / 2) { $start-=floor($a_num / 2) - ($end - $curpage); } } for ($i = $start; $i <= $end; $i++) { if ($i == $curpage) { $body.='<a class="page_cur_page" href="javascript:void(0);"><b>' . $i . '</b></a>'; } else { $body.='<a href="' . str_replace('{page}', $i, $url) . '">' . $i . '</a>'; } } $body.='</span>'; $prefix = ($curpage == 1 ? '' : '<span class="page_bar_prefix"><a href="' . str_replace('{page}', 1, $url) . '">' . $first . '</a><a href="' . str_replace('{page}', $curpage - 1, $url) . '">' . $pre . '</a></span>'); $subfix = ($curpage == $pages ? '' : '<span class="page_bar_subfix"><a href="' . str_replace('{page}', $curpage + 1, $url) . '">' . $next . '</a><a href="' . str_replace('{page}', $pages, $url) . '">' . $last . '</a></span>'); $info = "<span class=\"page_cur\">第{$curpage}/{$pages}页</span>"; $go = '<script>function ekup(){if(event.keyCode==13){clkyup();}}function clkyup(){var num=document.getElementById(\'gsd09fhas9d\').value;if(!/^\d+$/.test(num)||num<=0||num>' . $pages . '){alert(\'请输入正确页码!\');return;};location=\'' . addslashes($url) . '\'.replace(/\\{page\\}/,document.getElementById(\'gsd09fhas9d\').value);}</script><span class="page_input_num"><input onkeyup="ekup()" type="text" id="gsd09fhas9d" style="width:40px;vertical-align:text-baseline;padding:0 2px;font-size:10px;border:1px solid gray;"/></span><span id="gsd09fhas9daa" class="page_btn_go" onclick="clkyup();" style="cursor:pointer;text-decoration:underline;">转到</span>'; $total = "<span class=\"page_total\">共{$total}条</span>"; $pagination = array( $total, $info, $prefix, $body, $subfix, $go ); $output = array(); if (is_null($order)) { $order = array(1, 2, 3, 4, 5, 6); } foreach ($order as $key) { if (isset($pagination[$key - 1])) { $output[] = $pagination[$key - 1]; } } return implode("", $output); } public static function readData(Array $map, $source_data = null) { $data = array(); $formdata = is_null($source_data) ? WoniuInput::post() : $source_data; foreach ($formdata as $form_key => $val) { if (isset($map[$form_key])) { $data[$map[$form_key]] = $val; } } return $data; } public static function checkData(Array $rule, Array $data = NULL, &$return_data = NULL) { if (is_null($data)) { $data = WoniuInput::post(); } $return_data = $data; foreach ($rule as $col => $val) { foreach ($val as $_rule => $msg) { if (stripos($_rule, 'default[') === 0) { unset($rule[$col][$_rule]); $matches = self::getCheckRuleInfo($_rule); $_r = $matches[1]; $args = $matches[2]; $return_data[$col] = isset($args[0]) ? $args[0] : ''; } } } $unset_keys = array(); foreach ($rule as $col => $val) { if (!isset($return_data[$col])) { $return_data[$col] = ''; $unset_keys[] = $col; } } self::checkSetData('set', $rule, $return_data); foreach ($rule as $col => $val) { foreach ($val as $_rule => $msg) { if (!empty($_rule)) { if (empty($return_data[$col]) && isset($val['optional'])) { break; } else { $matches = self::getCheckRuleInfo($_rule); $_r = $matches[1]; $args = $matches[2]; if ($_r == 'set' || $_r == 'set_post' || $_r == 'optional') { continue; } if (!self::checkRule($_rule, $return_data[$col], $return_data)) { foreach ($unset_keys as $key) { unset($return_data[$key]); } return $msg; } } } } } self::checkSetData('set_post', $rule, $return_data); foreach ($unset_keys as $key) { unset($return_data[$key]); } return NULL; } private static function checkSetData($type, Array $rule, &$return_data = NULL) { foreach ($rule as $col => $val) { foreach (array_keys($val) as $_rule) { if (!empty($_rule)) { if (!isset($return_data[$col])) { if (isset($_rule['optional'])) { break; } else { $return_data[$col] = ''; } } $matches = self::getCheckRuleInfo($_rule); $_r = $matches[1]; $args = $matches[2]; if ($_r == $type) { $_v = $return_data[$col]; $_args = array($_v, $return_data); foreach ($args as $func) { if (function_exists($func)) { $reflection = new ReflectionFunction($func); if ($reflection->isInternal()) { $_args = array($_v); } } $_v = self::callFunc($func, $_args); } $return_data[$col] = $_v; } } } } } private static function getCheckRuleInfo($_rule) { $matches = array(); preg_match('|([^\[]+)(?:\[(.*)\](.?))?|', $_rule, $matches); $matches[1] = isset($matches[1]) ? $matches[1] : ''; $matches[3] = !empty($matches[3]) ? $matches[3] : ','; if ($matches[1] != 'reg') { $matches[2] = isset($matches[2]) ? explode($matches[3], $matches[2]) : array(); } else { $matches[2] = isset($matches[2]) ? array($matches[2]) : array(); } return $matches; } public static function callFunc($func, $args) { if (is_array($func)) { return self::callMethod($func, $args); } elseif (function_exists($func)) { return call_user_func_array($func, $args); } elseif (stripos($func, '::')) { $_func = explode('::', $func); return self::callMethod($_func, $args); } return null; } private static function callMethod($_func, $args) { $class = $_func[0]; $method = $_func[1]; if (is_object($class)) { $class = new ReflectionClass(get_class($class)); } else { $class = new ReflectionClass($class); } $obj = $class->newInstanceArgs(); $method = $class->getMethod($method); $method->setAccessible(true); return $method->invokeArgs($obj, $args); } private static function checkRule($_rule, $val, $data) { $matches = self::getCheckRuleInfo($_rule); $_rule = $matches[1]; $args = $matches[2]; switch ($_rule) { case 'required': return !empty($val); case 'match': return isset($args[0]) && isset($data[$args[0]]) ? $val && ($val == $data[$args[0]]) : false; case 'equal': return isset($args[0]) ? $val && ($val == $args[0]) : false; case 'enum': return in_array($val, $args); case 'unique': if (!$val || !count($args)) { return false; } $_info = explode('.', $args[0]); if (count($_info) != 2) { return false; } $table = $_info[0]; $col = $_info[1]; if (isset($args[1])) { $_id_info = explode(':', $args[1]); if (count($_id_info) != 2) { return false; } $id_col = $_id_info[0]; $id = $_id_info[1]; $id = stripos($id, '#') === 0 ? WoniuInput::get_post(substr($id, 1)) : $id; $where = array($col => $val, "$id_col <>" => $id); } else { $where = array($col => $val); } return !WoniuLoader::instance()->database()->where($where)->from($table)->count_all_results(); case 'exists': if (!$val || !count($args)) { return false; } $_info = explode('.', $args[0]); if (count($_info) != 2) { return false; } $table = $_info[0]; $col = $_info[1]; $where = array($col => $val); if (count($args) > 1) { foreach (array_slice($args, 1) as $v) { $_id_info = explode(':', $v); if (count($_id_info) != 2) { continue; } $id_col = $_id_info[0]; $id = $_id_info[1]; $id = stripos($id, '#') === 0 ? WoniuInput::get_post(substr($id, 1)) : $id; $where[$id_col] = $id; } } return WoniuLoader::instance()->database()->where($where)->from($table)->count_all_results(); case 'min_len': return isset($args[0]) ? (mb_strlen($val, 'UTF-8') >= intval($args[0])) : false; case 'max_len': return isset($args[0]) ? (mb_strlen($val, 'UTF-8') <= intval($args[0])) : false; case 'range_len': return count($args) == 2 ? (mb_strlen($val, 'UTF-8') >= intval($args[0])) && (mb_strlen($val, 'UTF-8') <= intval($args[1])) : false; case 'len': return isset($args[0]) ? (mb_strlen($val, 'UTF-8') == intval($args[0])) : false; case 'min': return isset($args[0]) && is_numeric($val) ? $val >= $args[0] : false; case 'max': return isset($args[0]) && is_numeric($val) ? $val <= $args[0] : false; case 'range': return (count($args) == 2) && is_numeric($val) ? $val >= $args[0] && $val <= $args[1] : false; case 'alpha': return !preg_match('/[^A-Za-z]+/', $val); case 'alpha_num': return !preg_match('/[^A-Za-z0-9]+/', $val); case 'alpha_dash': return !preg_match('/[^A-Za-z0-9_-]+/', $val); case 'alpha_start': return preg_match('/^[A-Za-z]+/', $val); case 'num': return !preg_match('/[^0-9]+/', $val); case 'int': return preg_match('/^([-+]?[1-9]\d*|0)$/', $val); case 'float': return preg_match('/^([1-9]\d*|0)\.\d+$/', $val); case 'numeric': return is_numeric($val); case 'natural': return preg_match('/^([1-9]\d*|0)$/', $val); case 'natural_no_zero': return preg_match('/^[1-9]\d*$/', $val); case 'email': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/', $val) : $args[0]; case 'url': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^http[s]?:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"])*$/', $val) : $args[0]; case 'qq': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^[1-9][0-9]{4,}$/', $val) : $args[0]; case 'phone': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^(?:\d{3}-?\d{8}|\d{4}-?\d{7})$/', $val) : $args[0]; case 'mobile': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1})|(14[0-9]{1}))+\d{8})$/', $val) : $args[0]; case 'zipcode': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^[1-9]\d{5}(?!\d)$/', $val) : $args[0]; case 'idcard': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^\d{14}(\d{4}|(\d{3}[xX])|\d{1})$/', $val) : $args[0]; case 'ip': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$/', $val) : $args[0]; case 'chs': $count = implode(',', array_slice($args, 1, 2)); $count = empty($count) ? '1,' : $count; $can_empty = isset($args[0]) && $args[0] == 'true'; return !empty($val) ? preg_match('/^[\x{4e00}-\x{9fa5}]{' . $count . '}$/u', $val) : $can_empty; case 'date': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$/', $val) : $args[0]; case 'time': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^(([0-1][0-9])|([2][0-3])):([0-5][0-9])(:([0-5][0-9]))$/', $val) : $args[0]; case 'datetime': $args[0] = isset($args[0]) && $args[0] == 'true' ? TRUE : false; return !empty($val) ? preg_match('/^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30))) (([0-1][0-9])|([2][0-3])):([0-5][0-9])(:([0-5][0-9]))$/', $val) : $args[0]; case 'reg': return !empty($args[0]) ? preg_match($args[0], $val) : false; case 'set': case 'set_post': return true; default: $_args = array_merge(array($val, $data), $args); $matches = self::getCheckRuleInfo($_rule); $func = $matches[1]; $args = $matches[2]; if (function_exists($func)) { $reflection = new ReflectionFunction($func); if ($reflection->isInternal()) { $_args = isset($_args[0]) ? array($_args[0]) : array(); } } return self::callFunc($_rule, $_args); } return false; } public static function includeOnce($file_path) { $key = md5(truepath(convertPath($file_path))); if (!isset(self::$files[$key])) { include $file_path; self::$files[$key] = 1; } } } class WoniuRule { public static function required() { return 'required'; } public static function defaultVal($val = '') { return 'default[' . $val . ']'; } public static function optional() { return 'optional'; } public static function match($field_name) { return 'match[' . $field_name . ']'; } public static function equal($val) { return 'equal[' . $val . ']'; } public static function enum($val, $delimiter = '') { return 'enum[' . $val . ']' . $delimiter; } public static function unique($val, $delimiter = '') { return 'unique[' . $val . ']' . $delimiter; } public static function exists($val, $delimiter = '') { return 'exists[' . $val . ']' . $delimiter; } public static function min_len($val) { return 'min_len[' . $val . ']'; } public static function max_len($val) { return 'min_len[' . $val . ']'; } public static function range_len($min_len, $max_len) { return 'range_len[' . $min_len . ',' . $max_len . ']'; } public static function len($val) { return 'len[' . $val . ']'; } public static function min($val) { return 'min[' . $val . ']'; } public static function max($val) { return 'max[' . $val . ']'; } public static function range($min, $max) { return 'range[' . $min . ',' . $max . ']'; } public static function alpha() { return 'alpha'; } public static function alpha_num() { return 'alpha_num'; } public static function alpha_dash() { return 'alpha_dash'; } public static function alpha_start() { return 'alpha_start'; } public static function num() { return 'num'; } public static function int() { return 'int'; } public static function float() { return 'float'; } public static function numeric() { return 'numeric'; } public static function natural() { return 'natural'; } public static function natural_no_zero() { return 'natural_no_zero'; } public static function url($can_empty = false) { return self::can_empty_rule('qq', $can_empty); } public static function email($can_empty = false) { return self::can_empty_rule('email', $can_empty); } public static function qq($can_empty = false) { return self::can_empty_rule('qq', $can_empty); } public static function phone($can_empty = false) { return self::can_empty_rule('phone', $can_empty); } public static function mobile($can_empty = false) { return self::can_empty_rule('mobile', $can_empty); } public static function zipcode($can_empty = false) { return self::can_empty_rule('zipcode', $can_empty); } public static function idcard($can_empty = false) { return self::can_empty_rule('idcard', $can_empty); } public static function ip($can_empty = false) { return self::can_empty_rule('ip', $can_empty); } public static function chs($val = '', $delimiter = '') { return 'chs' . ($val ? '[' . $val . ']' . $delimiter : ''); } public static function date($can_empty = false) { return self::can_empty_rule('date', $can_empty); } public static function datetime($can_empty = false) { return self::can_empty_rule('datetime', $can_empty); } public static function time($can_empty = false) { return self::can_empty_rule('time', $can_empty); } public static function reg($val) { return 'reg[' . $val . ']'; } public static function set($val, $delimiter = '') { return 'set[' . $val . ']' . $delimiter; } public static function set_post($val, $delimiter = '') { return 'set_post[' . $val . ']' . $delimiter; } private static function can_empty_rule($rule_name, $can_empty) { return $rule_name . ($can_empty ? '[true]' : ''); } } WoniuLoader::checkUserLoader(); class WoniuModelLoader { public static $model_files = array(); function __get($classname) { if (isset(self::$model_files[$classname])) { return self::$model_files[$classname]; } else { return WoniuLoader::model($classname); } } } class WoniuLibLoader { public static $lib_files = array(); function __get($classname) { if (isset(self::$lib_files[$classname])) { return self::$lib_files[$classname]; } else { return WoniuLoader::lib($classname); } } } class WoniuController extends WoniuLoaderPlus { private static $instance; public function __construct() { self::$instance = &$this; $this->autoload(); parent::__construct(); } private function autoload() { $system = WoniuLoader::$system; $autoload_helper = $system['helper_file_autoload']; $autoload_library = $system['library_file_autoload']; $autoload_models = $system['models_file_autoload']; foreach ($autoload_helper as $file_name) { $this->helper($file_name); } foreach ($autoload_library as $key => $val) { if (is_array($val)) { $key = key($val); $val = $val[$key]; $this->lib($key, $val); } else { $this->lib($val); } } foreach ($autoload_models as $key => $val) { if (is_array($val)) { $key = key($val); $val = $val[$key]; $this->model($key, $val); } else { $this->model($val); } } static $included = array(); foreach ($system['cache_drivers'] as $filepath) { $file = pathinfo($filepath, PATHINFO_BASENAME); $namex = str_replace(".php", "", $file); if ($namex == $system['cache_config']['storage']) { if (!isset($included[truepath($filepath)])) { WoniuLoader::includeOnce($filepath); } else { $included[truepath($filepath)] = 1; } } } } public static function &getInstance() { return self::$instance; } public static function instance($classname_path = null, $hmvc_module_floder = NULL) { if (!empty($hmvc_module_floder)) { WoniuRouter::switchHmvcConfig($hmvc_module_floder); } if (empty($classname_path)) { WoniuLoader::classAutoloadRegister(); return new self(); } $system = WoniuLoader::$system; $classname_path = str_replace('.', DIRECTORY_SEPARATOR, $classname_path); $classname = basename($classname_path); $filepath = $system['controller_folder'] . DIRECTORY_SEPARATOR . $classname_path . $system['controller_file_subfix']; $alias_name = strtolower($classname); static $loadedClasses = array(); if (in_array($alias_name, array_keys($loadedClasses))) { return $loadedClasses[$alias_name]; } if (file_exists($filepath)) { WoniuLoader::classAutoloadRegister(); WoniuLoader::includeOnce($filepath); if (class_exists($classname, FALSE)) { return $loadedClasses[$alias_name] = new $classname(); } else { trigger404('Ccontroller Class:' . $classname . ' not found.'); } } else { trigger404($filepath . ' not found.'); } } } class WoniuModel extends WoniuLoaderPlus { private static $instance; public static function instance($classname_path = null, $hmvc_module_floder = NULL) { if (!empty($hmvc_module_floder)) { WoniuRouter::switchHmvcConfig($hmvc_module_floder); } WoniuController::instance(); if (empty($classname_path)) { $renew = is_bool($classname_path) && $classname_path === true; WoniuLoader::classAutoloadRegister(); return empty(self::$instance) || $renew ? self::$instance = new self() : self::$instance; } $system = WoniuLoader::$system; $classname_path = str_replace('.', DIRECTORY_SEPARATOR, $classname_path); $classname = basename($classname_path); $model_folders = $system['model_folder']; if (!is_array($model_folders)) { $model_folders = array($model_folders); } $count = count($model_folders); WoniuLoader::classAutoloadRegister(); foreach ($model_folders as $key => $model_folder) { $filepath = $model_folder . DIRECTORY_SEPARATOR . $classname_path . $system['model_file_subfix']; $alias_name = $classname; if (in_array($alias_name, array_keys(WoniuModelLoader::$model_files))) { return WoniuModelLoader::$model_files[$alias_name]; } if (file_exists($filepath)) { if (!class_exists($classname, FALSE)) { WoniuLoader::includeOnce($filepath); } if (class_exists($classname, FALSE)) { return WoniuModelLoader::$model_files[$alias_name] = new $classname(); } else { if ($key == $count - 1) { trigger404('Model Class:' . $classname . ' not found.'); } } } else { if ($key == $count - 1) { trigger404($filepath . ' not  found.'); } } } } } class WoniuTableModel extends WoniuModel { public $pk; public $keys = array(); public $table; public $full_table; public $map = array(); public $prefix; public $fields = array(); private static $models = array(), $table_cache = array(); public function __construct() { parent::__construct(); $this->database(); } public function init($table, $db = null) { if (!is_null($db)) { $this->db = $db; } $this->prefix = $this->db->dbprefix; $this->table = $table; $this->fields = $fields = $this->getTableFieldsInfo($table, $this->db); foreach ($fields as $col => $info) { if ($info['primary']) { $this->pk = $col; } $this->keys[] = $col; $this->map[$col] = $col; } return $this; } public static function M($table, $db = null) { if (!isset(self::$models[$table])) { self::$models[$table] = new WoniuTableModel(); self::$models[$table]->init($table, $db); } return self::$models[$table]; } public function columns() { return $this->keys; } public static function getTableFieldsInfo($tableName, $db) { if (!empty(self::$table_cache[$tableName])) { return self::$table_cache[$tableName]; } if (!file_exists($cache_file = systemInfo('table_cache_folder') . DIRECTORY_SEPARATOR . $tableName . '.php')) { $info = array(); $result = $db->query('SHOW FULL COLUMNS FROM ' . $db->dbprefix . $tableName)->result_array(); if ($result) { foreach ($result as $val) { $info[$val['Field']] = array( 'name' => $val['Field'], 'type' => $val['Type'], 'comment' => $val['Comment'] ? $val['Comment'] : $val['Field'], 'notnull' => $val['Null'] == 'NO' ? 1 : 0, 'default' => $val['Default'], 'primary' => (strtolower($val['Key']) == 'pri'), 'autoinc' => (strtolower($val['Extra']) == 'auto_increment'), ); } } $content = 'return ' . var_export($info, true) . ";\n"; $content = '<?'.'php'."\n" . $content; file_put_contents($cache_file, $content); $ret_info[$tableName] = $info; } else { $ret_info[$tableName] = include ($cache_file); } return $ret_info[$tableName]; } public function check($source_data, &$ret_data, $rule = null, $map = null) { $rule = !is_array($rule) ? array() : $rule; $map = is_null($map) ? $this->map : $map; $data = $this->readData($map, $source_data); return $this->checkData($rule, $data, $ret_data); } public function insert($ret_data) { return $this->db->insert($this->table, $ret_data); } public function update($ret_data, $where) { $where = is_array($where) ? $where : array($this->pk => $where); return $this->db->where($where)->update($this->table, $ret_data); } public function find($values, $is_rows = false, $order_by = null) { if (empty($values)) { return 0; } if (is_array($values)) { $is_asso = array_diff_assoc(array_keys($values), range(0, sizeof($values))) ? TRUE : FALSE; if ($is_asso) { $this->db->where($values); } else { $is_rows = true; $this->db->where_in($this->pk, array_values($values)); } } else { $this->db->where(array($this->pk => $values)); } if ($order_by) { $this->db->order_by($order_by); } if (!$is_rows) { $this->db->limit(1); } $rs = $this->db->get($this->table); if ($is_rows) { return $rs->result_array(); } else { return $rs->row_array(); } } public function findAll($where = null, $orderby = NULL, $limit = null, $fileds = null) { if (!is_null($fileds)) { $this->db->select($fileds); } if (!is_null($where)) { $this->db->where($where); } if (!is_null($orderby)) { $this->db->order_by($orderby); } if (!is_null($limit)) { $this->db->limit($limit); } return $this->db->get($this->table)->result_array(); } public function findCol($col, $where, $is_rows = false, $order_by = null) { $row = $this->find($where, $is_rows, $order_by); if (!$is_rows) { return isset($row[$col]) ? $row[$col] : null; } else { $vals = array(); foreach ($row as $v) { $vals[] = $v[$col]; } return $vals; } } public function delete($values, Array $cond = NULL) { return $this->deleteIn($this->pk, $values, $cond); } public function deleteIn($key, $values, Array $cond = NULL) { if (empty($values)) { return 0; } if (is_array($values)) { $this->db->where_in($key, array_values($values)); } else { $this->db->where(array($key => $values)); } if (!empty($cond)) { $this->db->where($cond); } if ($this->db->delete($this->table)) { return $this->db->affected_rows(); } else { return false; } } public function getPage($page, $pagesize, $url, $fields = '*', Array $where = null, Array $like = null, $orderby = null, $page_bar_order = array(1, 2, 3, 4, 5, 6), $page_bar_a_count = 10) { $data = array(); if (is_array($where)) { $this->db->where($where); } if (is_array($like)) { $this->db->like(key($like), current($like)); } $total = $this->db->from($this->table)->count_all_results(); if (is_array($where)) { $this->db->where($where); } if (is_array($like)) { $this->db->like(key($like), current($like)); } if (!is_null($orderby)) { $this->db->order_by($orderby); } $data['items'] = $this->db->select($fields)->limit($pagesize, ($page - 1) * $pagesize)->get($this->table)->result_array(); $data['page'] = $this->page($total, $page, $pagesize, $url, $page_bar_order, $page_bar_a_count); return $data; } public function search($page, $pagesize, $url, $fields, $cond, $page_bar_order = array(1, 2, 3, 4, 5, 6), $page_bar_a_count = 10) { $data = array(); $table = $this->full_table; $query = $this->db->query('select count(*) as total from ' . $table . (strpos(trim($cond), 'order') === 0 ? '' : ' where') . $cond)->row_array(); $total = $query['total']; $data['items'] = $this->db->query('select ' . $fields . ' from ' . $table . (strpos(trim($cond), 'order') === 0 ? '' : ' where') . $cond . ' limit ' . (($page - 1) * $pagesize) . ',' . $pagesize)->result_array(); $data['page'] = $this->page($total, $page, $pagesize, $url, $page_bar_order, $page_bar_a_count); return $data; } } 